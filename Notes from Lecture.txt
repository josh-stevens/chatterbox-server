Talkin' bout HTTP. 

Mini sprint on HTTP. 

When you write to servers you need to understand how servers work. 

Client <==> Server. 

Each of these is some kind of program that are running.  They don't need to be on different computers, they just need to be running somewhere. 

The client will send requests, and the server is always waiting, listening and responding to requests. 

* Your web browser is the most common HTTP client. 
* Perl is command line tool where you can make HTTP requests. 
* Postman is another client which lives in the browser but it's it's own program(almost) which can make HTTP requests. 
* Ajax is also within the browser, but it is Javascript making HTTP requests. 
* You can also have any kind of programming language has a way to make HTTP requests. 

Servers

* Most common servers are web apps - Facebook, Google - all the things that live on the internet. 
* Node.js is an example of a server. 
* An API is another example of a server. 

All of these servers are going to be running somewhere, listening, and recieving a request.  Which it gets that request, it will send a response. 

In HTTP:

The client sends a request to the server.
The server always sends back a response. 

There are two main parts to HTTP:

Method & URL (aka path)

These two put together are the identification of what you're trying to do. These two put together are an action that you're telling the server what to do. 

For example:

GET /chats
POST /chats

It's the method and the path put together that creates the actions. /GET chats and POST /chats are completely different. These are two "end points".

You can only make one end point per request. 

For GET we're usually retrieving data. We're asking for the data at X url. GET should never change anything, all it does is retrieve data. 

POST - the intent of POST is to create data. We request to the server to please create this item. 

Post requests have something called a request body. 

A request body is additional data that you're sending to the server.  With a post request, this is usually the data we want to create.  

Get requests usually don't have request bodies. 

-----------------------

GET /chats

The server will build up a response and send back some data.  This day might look like JSON [{"id":"10", "Message": "hi"}, {"id":"11", "message": "hello"}]

This data that we get from the server will be contained in the response body.  

The client will then take the JSON and parse it from that response body. 

------------------------ 

Everything about HTTP is plain text.  It's all text being sent over the wire (hence the need for JSON). 

------------------------

Postman is an HTTP client. It makes it easy to craft your HTTP requests, and very useful for trying out things such as APIs.  This is the main part - this is where we enter in our end point.  We specify our method. There are many but we are only interested in GET and POST.  We then enter our URL. 

GET chat.api.mks.io

If I send this get request, this is a GET to root (/).  This is a root endpoint

You can see the raw requests in postman. It's all a bunch of text.  We're just sending a bunch of text to the server, and it will look for certain things inside the text and that's how it knows what to do. 

-------------------------

POST chat.api.mks.io/chats

Post requests need a message body.  Such as {'message': 'hello'}.  The HTTP request data has a message body in the case of POST. It is all just sent text. 

There's an empty line, and everything after that is the request body.  

---------------------------

Server response - if we look on raw, we see the server sends us a status. (such as 200 OK).  It will tell you (generally) what happened on the server side. 4xx means you did something wrong. 5xx means the server did something wrong. 

---------------------------

A response is going to look like a request.  The response will look exactly like this - headers, then an empty line - then a response body. Probably the most important is content-type.  Everything is text, so if we want to use JSON, we must use JSON parse. But we might not know it's JSON, so we need to look at the content type to tell the client what type of data is in the response body (JSON vs. text, HTML vs. text); 

----------------------------

As a server you're going to be using the requests and going to be sending requests.  You'll be working with post requests too, so you'll look at request bodies. 

Minisprint to warm up. 

---------------------------

NODE.JS

Node.js is a javascript runtime. The browser has a javascript runtime, specifically Chrome's javascript runtime is called V8. This is the reason we can run Javascript in the browser whenever we type in the console or use <script> tags. 

In the past, the browser was the only environment where you could run javascript, but now we have Node.JS - a way to run javascript outside of the browser. We can run it as if we were in a browser console. 

Node.js is built on top of V8.  

Node has a lot of built in libraries, like HTTP and websockets that help you do things. 

We'll be using Node to build an HTTP server that will access the filesystem. 

--------------------------

The basics of node: Running files, requiring files, and using NPM. 

Start by creating a blank folder. I'm going to create a file called "my-file.js"

---
my-file.js
---
    console.log("hello");
---

node my-file.js // ==> hello

-------------------

Node.js doesn't have html, and doesn't have a dom and doesn't have script tags.  We use "Require"

---
   require('./vendor/jquery.js')  ===  <script.src="vendor/jquery.js" /> 
---

If I try to require something that exist, it'll throw an error. 

Obviously you can only require files that exist. Requiring it by itself is not very useful, we want helpers and use them in this file. 

---
my-file.js
--- 
	var helpers = require('./lib/helpers.js')
	console.log( helpers.shout("hello"));

---
helpers.js
---
	exports.shout = function (str) {
		return str.toUpperCase(); 
	}
---

node my-file.js // ==> HELLO

Each file is it's own scope in node.  When you require this file, you obtain the exports object which is part of every "require"d file. Whatever you attach to exports will be available to other files. 



---
my-file.js
--- 
	var helpers = require('./lib/helpers.js')
	console.log( helpers.exclaim(helpers.shout("hello")));

---
helpers.js
---
	exports.shout = function (str) {
		return str.toUpperCase(); 
	};

	exports.exclaim = function(str){
		return str + '!';
	}
---
node my-file.js // ==> HELLO!


---------------------------------

Requiring third party libraries:

NPM is a node package manager, and an easy way to use libraries that you did not write yourself. 

Creating a new project, do "npm init" which will write out a JSON file, it uses that file to manage your dependencies.  

"npm install underscore --save" (it will modify that json to record that you need underscore as a dependency.)

It will install those to the node_modules folder.  You can now use thes files in your node-code.

---
my-file.js
--- 
	var helpers = require('./lib/helpers.js')
	var _ = require('underscore') // notice there is no ./ -- that's for local files. 
	                              // NPM packages don't need these/can't use these. 
	console.log( helpers.exclaim(helpers.shout("hello")));

---

to get dependencies: If you have them listed (which is a common case when sharing code with team members, because you commit package.json but not your node modules folder)

All you have to do is run "npm install" and all the dependencies will be installed. 